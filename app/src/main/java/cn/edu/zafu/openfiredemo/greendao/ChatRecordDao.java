package cn.edu.zafu.openfiredemo.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.edu.zafu.openfiredemo.im.db.bean.ChatRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHAT_RECORD".
*/
public class ChatRecordDao extends AbstractDao<ChatRecord, Long> {

    public static final String TABLENAME = "CHAT_RECORD";

    /**
     * Properties of entity ChatRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IsReceive = new Property(1, boolean.class, "isReceive", false, "IS_RECEIVE");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property OppositeUserId = new Property(3, String.class, "oppositeUserId", false, "OPPOSITE_USER_ID");
    }


    public ChatRecordDao(DaoConfig config) {
        super(config);
    }
    
    public ChatRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHAT_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IS_RECEIVE\" INTEGER NOT NULL ," + // 1: isReceive
                "\"CONTENT\" TEXT," + // 2: content
                "\"OPPOSITE_USER_ID\" TEXT);"); // 3: oppositeUserId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHAT_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsReceive() ? 1L: 0L);
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String oppositeUserId = entity.getOppositeUserId();
        if (oppositeUserId != null) {
            stmt.bindString(4, oppositeUserId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getIsReceive() ? 1L: 0L);
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        String oppositeUserId = entity.getOppositeUserId();
        if (oppositeUserId != null) {
            stmt.bindString(4, oppositeUserId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChatRecord readEntity(Cursor cursor, int offset) {
        ChatRecord entity = new ChatRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // isReceive
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // oppositeUserId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsReceive(cursor.getShort(offset + 1) != 0);
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOppositeUserId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
